name: ci

on:
  workflow_dispatch:
  #   inputs:
  #     BuildConfiguration:
  #       description: Build Configuration     
  #       required: true
  #       default: Release
  #     buildLogFile:
  #       description: dotnet build logfile location
  #       required: true
  #       default: buildLog.log
  push:
    branches: [ main, 'feature/*' ]
    # paths-ignore:
    #   - ".azure-pipelines/**"
    #   #- '.github/**'
    #   - LICENSE
    #   - README.md
  pull_request:
    branches: [ main ]

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:

    - name: debug github workspace
      run: |
        echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        echo "github.workspace = ${{ github.workspace }}"
        echo "pr.ref = ${{github.event.pull_request.head.ref}}"
        echo "github.ref = ${{ github.ref }}"
        echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x

    #https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md
    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: .NET Core 3.1.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: .NET 5.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        #dotnet-version: 6.0.x # note: 5.0 lacks msbuild for simple reproducible-builds
        #include-prerelease: true
  
    - name: dotnet restore
      run: dotnet restore --verbosity minimal --configfile nuget.config

    - name: dotnet build
      run: dotnet build -c Release --nologo --no-restore -p:Version='${{ steps.gitversion.outputs.semVer }}' -p:SourceRevisionId=${{ github.sha }}

    - name: dotnet test
      run: dotnet test -c Release --nologo --no-restore --no-build -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura #-p:Include="${{ parameters.CoverageInclude}}"

    - name: ReportGenerator 1
      run: |
        dotnet tool update -g dotnet-reportgenerator-globaltool
        cd $HOME/.dotnet/tools
        ls -lsa
        $HOME/.dotnet/tools/reportgenerator '-reports:${{ github.workspace }}/src/*.Tests/coverage.*.cobertura.xml' -targetdir:${{ github.workspace }}/CodeCoverage '-reporttypes:HtmlInline_AzurePipelines;Cobertura'
        ls -lsa
      shell: bash

    #https://github.com/danielpalme/ReportGenerator/wiki/Integration#github-actions
    - name: ReportGenerator 2
      uses: danielpalme/ReportGenerator-GitHub-Action@4.5.8
      if: false
      with:
        reports: 'coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
        # sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        # historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        # plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        # assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        # classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        # filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        # verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        # title: '' # Optional title.
        # tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.

    #PublishCodeCoverageResults?

    - name: dotnet pack -c Release --nologo --no-build --include-symbols -o ${{ github.workspace }} -p:Version='${{ steps.gitversion.outputs.semVer }}'
      #if: ${{ success() && !github.base_ref }}
      run: dotnet pack

    - name: debug path/dir
      run: |
        pwd
        ls -lsa
      shell: bash

    - name: dotnet push
      run: dotnet nuget push ${{ github.workspace }}/**/*.nupkg --skip-duplicate -s ${{ secrets.NuGetSourceUrl }} --api-key ${{ secrets.NuGetServerApiKey }}
      #if: ${{ github.ref == 'refs/heads/main' }}

    - name: git tag
      run: |
        git tag ${{ steps.gitversion.outputs.semVer }}
        git push origin --tags
      if: ${{ github.ref == 'refs/heads/main' }}

      #Publish github release?
