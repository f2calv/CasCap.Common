name: ci

on:
  workflow_dispatch:
  #   inputs:
  #     BuildConfiguration:
  #       description: Build Configuration
  #       required: true
  #       default: Release
  #     buildLogFile:
  #       description: dotnet build logfile location
  #       required: true
  #       default: buildLog.log
  push:
    branches: [main, 'feature/*']
    # paths-ignore:
    #   - ".azure-pipelines/**"
    #   #- '.github/**'
    #   - LICENSE
    #   - README.md
  pull_request:
    branches: [main]

jobs:
  build:
    environment: dev
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{matrix.os}}
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x

    #https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: .NET Core 3.1.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: .NET 5.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        #dotnet-version: 6.0.x # note: 5.0 lacks msbuild for simple reproducible-builds
        #include-prerelease: true

    - name: dotnet restore
      run: dotnet restore --verbosity minimal --configfile nuget.config

    - name: dotnet build
      run: dotnet build -c Release --nologo --no-restore -p:Version='${{ steps.gitversion.outputs.semVer }}' -p:SourceRevisionId=${{ github.sha }}

    - name: dotnet test
      run: dotnet test -c Release --nologo --no-restore --no-build -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura

    - name: coverage report generator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.5.8
      if: runner.OS == 'Linux'
      with:
        reports: '${{ github.workspace }}/src/*.Tests/coverage.*.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: ${{ github.workspace }}/coveragereport # REQUIRED # The directory where the generated report should be saved.
        reporttypes: HtmlInline;Cobertura # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
        tag: ${{ github.run_number }}_${{ github.run_id }}

    - name: upload coverage report artifact
      uses: actions/upload-artifact@v2
      if: runner.OS == 'Linux'
      with:
        name: CoverageReport
        path: coveragereport

    - name: dotnet pack
      run: dotnet pack -c Release --nologo --no-build --include-symbols -p:Version='${{ steps.gitversion.outputs.semVer }}'
      if: runner.OS == 'Linux'

    - name: upload packages
      uses: actions/upload-artifact@v2
      if: runner.OS == 'Linux'
      with:
        name: packages
        path: |
          src/**/*.nupkg
          src/**/*.snupkg

    # - name: dotnet push
    #   run: dotnet nuget push ${{ github.workspace }}/src/**/*.nupkg --skip-duplicate -s ${{ secrets.NuGetSourceUrl }} --api-key ${{ secrets.NuGetServerApiKey }}
    #   #if: ${{ github.ref == 'refs/heads/main' }}

    # - name: git tag
    #   run: |
    #     git tag ${{ steps.gitversion.outputs.semVer }}
    #     git push origin --tags
    #   if: ${{ github.ref == 'refs/heads/main' }}

      #Publish github release?
